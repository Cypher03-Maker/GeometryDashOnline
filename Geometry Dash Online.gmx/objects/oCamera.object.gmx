<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBtnCubes</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ex_tween_initialize()
ex_camera_initialize();

globalvar Pause, Direction, xFlip, CameraX, CameraY, JumpOrd, TimeWarp, ColorRedBG, ColorGreenBG, ColorBlueBG, ColorRedG, ColorGreenG, ColorBlueG, CollideY;
screenShake = false;

globalvar BGIndexLevel, GIndexLevel, FGIndexLevel, FGAlphaLevel, SongListLevel;
BGIndexLevel = 25;
GIndexLevel = 0;
FGIndexLevel = 0;
FGAlphaLevel = 0;
SongListLevel = 1;

CameraX = 0;
CameraY = 0;
Fade = 0;
CollideY = 0;
a_speed=.003;

xFlip = 1;
Direction = 0;
_follow_object = true;
global.MusicPlayID = StereoMadness;
global.Pause = false;

ex_camera_create("main", 0, 0, 0, view_wview, view_hview, 0, 0, 0, 100, oPlayer, true, 0, 0, room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screenShake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Position</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (instance_exists(oPlayer)) {
    // Make sure player is inside box
    x = max(oPlayer.x - sprite_width  * 0.5 + 32, min(x, oPlayer.x + (sprite_width  * 0.5) - 32));
    y = max(oPlayer.y - sprite_height * 0.5 + 32, min(y, oPlayer.y + (sprite_height * 0.5) - 32));
    
    if (keyboard_check(vk_left)) {
        PosX = 0.8;
    } else if (keyboard_check(vk_right)) {
        PosX = 0.2;
    } else {
        PosX = 0.5;
    }
    
    // Approach      
    view_xview[0] = lerp(view_xview[0], x - view_wport[0] * PosX, 0.025);
    view_yview[0] = lerp(view_yview[0], y - view_hport[0] * 0.5 - 100, 0.025);
    
    // Make sure camera is inside room
    view_xview[0] = max(0, min(view_xview[0], room_width  - view_wport[0]));
    view_yview[0] = max(0, min(view_yview[0], room_height - view_hport[0]));      
}*/

if (instance_exists(oPlayer) and _follow_object == true) {
    view_yview[0] = max(0, min(view_yview[0], room_height - (view_hview[0])));
    ex_camera_scroll_to_point("main", (oPlayer.x - view_wport/2) + CameraX, (oPlayer.y - view_hport/3) + CameraY, 6 / TimeWarp, scr_ease_inout_sine, false);
}

/*if (instance_exists(objEndLevel)) {
    ex_camera_set_bounds("main", 0, 0, objEndLevel.x + 500, room_height)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Screenshake</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Screenshake
/*if (screenShake) {
    view_angle[0] = random_range(-1, 1);
} else {
    // Reset
    view_angle[0] = 0;
}*/

/*if (keyboard_check_pressed(ord("S"))) {
    ex_camera_shake("main", 10, 10, 5, 12, scr_ease_out_sine);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ex_camera_destroy("main")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(os_type) {
    case os_android:
    instance_create(0, 0, objPlatformControlAndroid)
    break;
    
    case os_windows:
    instance_create(0, 0, objPlatformControlWindows)
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Matrix X
if Direction = 1
{
    var matrix = matrix_get(matrix_projection);
    
    if xFlip &gt; -1
    {
        xFlip = xFlip - 0.1
    }
    matrix[0] *= xFlip;
    
    matrix_set(matrix_projection,matrix);
}
else
{
    var matrix = matrix_get(matrix_projection);
    
    if xFlip &lt; 1
    {
        xFlip = xFlip + 0.1
    }
    matrix[0] *= xFlip;
    
    matrix_set(matrix_projection,matrix);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type == os_android) {
    if keyboard_check(vk_left)
    {
        draw_sprite_ext(sprPlatformerControls, 1, view_xport + 200, view_hport - 100, 1.15, 1.15, 0, c_white, 1)
    }
    else if keyboard_check(vk_right)
    {
        draw_sprite_ext(sprPlatformerControls, 1, view_xport + 200, view_hport - 100, 1.15 * -1, 1.15, 0, c_white, 1)
    }
    else
    {
        draw_sprite_ext(sprPlatformerControls, 0, view_xport + 200, view_hport - 100, 1.15, 1.15, 0, c_white, 1)
    }
}

draw_set_font(ChatFont);
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_text_transformed_colour(8, 8, string(oPlayer.gravNorm), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, 0.5)
draw_text_transformed_colour(8, 28, string(oPlayer.x), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, 0.5)
draw_text_transformed_colour(8, 48, string(oPlayer.y), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, 0.5)
draw_text_transformed_colour(8, 68, string(oPlayer.vx), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, 0.5)
draw_text_transformed_colour(8, 88, string(oPlayer.vy), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, 0.5)
draw_text_transformed_colour(8, 108, string(TimeWarp), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, 0.5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()

//draw_set_circle_precision(64)
/*draw_set_blend_mode(bm_add)
//draw_roundrect_colour_ext(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, 180, 180, c_green, c_black, false); 
//draw_ellipse_colour(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, c_black, c_green, false); 
draw_rectangle_colour(view_xview - view_wview, view_yview - view_hview, view_xview + view_wview, view_yview + view_hview, c_black, c_black, c_green, c_green, false); 
draw_set_blend_mode(bm_normal)*/

/*draw_set_blend_mode(bm_add)
draw_primitive_begin(pr_trianglestrip);
draw_vertex_colour(view_xview - view_wview, view_yview - view_hview, c_blue, 1);
draw_vertex_colour(view_xview - view_wview, view_yview + view_hview, c_blue, 1);
draw_vertex_colour(view_xview + view_wview, view_yview - view_hview, c_green, 1);
draw_vertex_colour(view_xview + view_wview, view_yview + view_hview, c_green, 1);
draw_primitive_end();
draw_set_blend_mode(bm_normal)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
