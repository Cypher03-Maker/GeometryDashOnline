<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gml_release_mode(false)
draw_texture_flush()
ex_tween_initialize()
device_mouse_dbclick_enable(true)
display_set_windows_alternate_sync(true)
display_set_windows_vertex_buffer_method(vbm_most_compatible);

globalvar ScaleVar01, ScaleVar02, ScaleVar03, ShipMode, PageCredits, PageShaders, PageTransitions, PageResolutions, TransitionGen, PartSize, PartSizeIncr, PartScaleX, PartScaleY, PartAlpha1, PartAlpha2, PartAlpha3, PartSpeed, PartSpeedIncr,
PartColourRMin, PartColourRMax, PartColourGMin, PartColourGMax, PartColourBMin, PartColourBMax, PartDirMin, PartDirMax, PartDirIncr, PartLife, WindowCenter;

globalvar aspect_ratio;

global.PageIcons = 1;
global.PageBalls = 1;
global.PageShips = 1;
global.PageUFOs = 1;
global.PageWaves = 1;
global.PageSmashers = 1;
global.PageSpiders = 1;
global.PageSwings = 1;
global.PageJetPacks = 1;
global.PageArmadillos = 1;
global.PageGameModes = 1;
global.PageEffects = 3;
global.PageGameModeExt = 1;
global.PageGameModeCredits = 1;
global.PageCubesCredits = 1;
global.PageShipsCredits = 1;
global.PageSpidersCredits = 1;
global.PageSwingsCredits = 1;
global.PageJetPacksCredits = 1;

global.CubeNumber = 0;
global.CubeExtraNumber = 0;
global.CubeExtraAlpha = 0;

global.ShipNumber = 0;
global.ShipExtraNumber = 0;
global.ShipExtraAlpha = 0;

global.BallNumber = 0;
global.BallExtraNumber = 0;
global.BallExtraAlpha = 0;

global.UFONumber = 0;
global.UFOExtraNumber = 0;
global.UFOExtraAlpha = 0;

global.WaveNumber = 0;
global.WaveExtraNumber = 0;
global.WaveExtraAlpha = 0;

global.SpiderNumber = 0;
global.SpiderExtraNumber = 0;
global.SpiderExtraAlpha = 1;

global.SwingNumber = 0;
global.SwingExtraNumber = 0;
global.SwingExtraAlpha = 1;

global.JetPackNumber = 0;
global.JetPackExtraNumber = 0;
global.JetPackExtraAlpha = 1;

global.ArmadilloNumber = 0;
global.ArmadilloExtraNumber = 0;
global.ArmadilloExtraAlpha = 1;

global.SmasherNumber = 0;
global.SmasherExtraNumber = 0;
global.SmasherExtraAlpha = 0;

global.ExplotionNumber = 0;
global.SpecialEffectNumber = 0;
global.PartBlend = 1;
global.Fullscreen = 0;
global.WindowWidth = 640;
global.WindowHeight = 480;
global.ShaderColorBlindMode = 0;

IconCount01 = 0;
IconCount = 1;

ScaleVar01 = true;
ScaleVar02 = true;
ScaleVar03 = true;
ShipMode = 1;
PageCredits = 1;
PageShaders = 1;
PageTransitions = 1;
PageResolutions = 1;
TransitionGen = Transitions.Fade;

PartScaleX = 0.30;
PartScaleY = 0.30;
PartSize = 0.30;
PartSizeIncr = 0.00;
PartSpeed = 0.50;
PartSpeedIncr = 0.00;
PartAlpha1 = 1.00;
PartAlpha2 = 1.00;
PartAlpha3 = 1.00;
PartColourRMin = 1.00;
PartColourRMax = 1 / 16;
PartColourGMin = 1;
PartColourGMax = 1 / 16;
PartColourBMin = 1;
PartColourBMax = 1 / 16;
PartDirMin = 0.00;
PartDirMax = 0.50;
PartDirIncr = 0.00;
PartLife = 0.50;

WindowCenter = true; 

global.Col01 = make_color_rgb(0, 255, 0);
global.Col02 = make_color_rgb(0, 255, 255);
global.Col03 = make_color_rgb(0, 255, 255);
global.ColorMode = 1;
global.FPSAlpha = 0;
global.EnableCB = 0;
global.vsync = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_sliderMusic)) {
    instance_destroy(obj_sliderMusic)
}

if (instance_exists(obj_gsButtonExitSettings)) {
    instance_destroy(obj_gsButtonExitSettings)
}

if (instance_exists(obj_MenuSettings)) {
    instance_destroy(obj_MenuSettings)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScaleVar01 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScaleVar02 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_set_offset(sprSliderBar, 30, 40)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ChatFont);
draw_set_halign(fa_left)
draw_set_valign(fa_top)

var text2 = "";

draw_text_transformed_colour(0, 0, "FPS: " + string(fps), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, global.FPSAlpha);
draw_text_transformed_colour(0, 25, "RFPS: " + string(fps_real), 0.2, 0.2, 0, c_white, c_white, c_white, c_white, global.FPSAlpha);

/*if (file_exists("CCGameLevelManager.dat")) {
    var file = file_text_open_read("CCGameLevelManager.dat");
    
    while(!file_text_eof(file)) {
        text2 += file_text_readln(file)
    }
    file_text_close(file)
}

draw_text(50, 100, text2)*/

draw_set_halign(fa_left)
draw_set_valign(fa_bottom)

draw_text_transformed(0, view_hport, "v" + string(GM_version), 0.2, 0.2, 0);

draw_set_halign(fa_right)
draw_set_valign(fa_top)

draw_text_transformed(view_wport, 0, date_time_string( date_current_datetime() ), 0.2, 0.2, 0);

draw_set_font(goldFont_hd);
draw_set_halign(fa_right)
draw_set_valign(fa_bottom)

switch(os_type) {
    case os_windows:
    draw_text_custom(view_wport, view_hport, "Windows Version", 1, 0.5, 0.5);
    break;
    
    case os_android:
    draw_text_custom(view_wport, view_hport, "Android Version", 1, 0.5, 0.5);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Room;

switch(room) {
    case rmMenu01:
    scr_createMenuExit();
    break;
    
    case rmMenu02:
    Room = rmMenu01;
    scr_room_transitions(Room, TransitionGen);
    break;
    
    case rmSettings:
    Room = rmMenu01;
    scr_room_transitions(Room, TransitionGen);
    break;
    
    case rmCustom:
    Room = rmMenu01;
    scr_room_transitions(Room, TransitionGen);
    break;
    
    case rmTheShop01:
    Room = rmCustom;
    scr_room_transitions(Room, TransitionGen);
    break;
    
    case rmOtherGames:
    Room = rmMenu01;
    scr_room_transitions(Room, TransitionGen);
    break;
    
    case rmMenuLevels:
    Room = rmMenu01;
    scr_room_transitions(Room, TransitionGen);
    break;
    
    case rmLevelTest:
    Room = rmMenuLevels;
    scr_room_transitions(Room, TransitionGen);
    obj_GDOControler.alarm[1] = 10;
    break;
    
    case rmLevelEditor:
    Room = rmMenu02;
    if (instance_exists(obj_GUIMenuTriggerColor)) {
        instance_destroy(obj_GUIMenuTriggerColor)
        instance_destroy(obj_SliderRGB01)
        instance_destroy(obj_SliderRGB02)
        instance_destroy(obj_SliderRGB03)
    }
    
    if (instance_exists(obj_GUIMenuTriggerZoom)) {
        instance_destroy(obj_GUIMenuTriggerZoom)
        instance_destroy(obj_SliderZoom)
        instance_destroy(obj_SliderTime)
    }
    
    if (instance_exists(obj_GUIMenuTriggerRotate)) {
        instance_destroy(obj_GUIMenuTriggerRotate)
        instance_destroy(obj_SliderRotateCam)
        instance_destroy(obj_SliderTime)
    }
    
    if (instance_exists(obj_GUIMenuForceBlock)) {
        instance_destroy(obj_GUIMenuForceBlock)
        //instance_destroy(obj_SliderRotateCam)
        instance_destroy(obj_SliderTime)
    }
    ScaleVar01 = true;
    scr_savelAllObjects();
    scr_room_transitions(Room, TransitionGen);
    break;
}

audio_stop_sound(StereoMadness)
audio_stop_sound(BackOnTrack)
audio_stop_sound(Polargeist)
audio_stop_sound(DryOut)
audio_stop_sound(BaseAfterBase)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Room;

if (os_type == os_android) {
    switch(room) {
        case rmMenu01:
        scr_createMenuExit();
        break;
        
        case rmMenu02:
        Room = rmMenu01;
        scr_room_transitions(Room, TransitionGen);
        break;
        
        case rmSettings:
        Room = rmMenu01;
        scr_room_transitions(Room, TransitionGen);
        break;
        
        case rmCustom:
        Room = rmMenu01;
        scr_room_transitions(Room, TransitionGen);
        break;
        
        case rmTheShop01:
        Room = rmCustom;
        scr_room_transitions(Room, TransitionGen);
        break;
        
        case rmOtherGames:
        Room = rmMenu01;
        scr_room_transitions(Room, TransitionGen);
        break;
        
        case rmMenuLevels:
        Room = rmMenu01;
        scr_room_transitions(Room, TransitionGen);
        break;
        
        case rmLevelTest:
        Room = rmMenuLevels;
        scr_room_transitions(Room, TransitionGen);
        obj_GDOControler.alarm[1] = 10;
        break;
        
        case rmLevelEditor:
        Room = rmMenu02;
        if (instance_exists(obj_GUIMenuTriggerColor)) {
            instance_destroy(obj_GUIMenuTriggerColor)
            instance_destroy(obj_SliderRGB01)
            instance_destroy(obj_SliderRGB02)
            instance_destroy(obj_SliderRGB03)
        }
        
        if (instance_exists(obj_GUIMenuTriggerZoom)) {
            instance_destroy(obj_GUIMenuTriggerZoom)
            instance_destroy(obj_SliderZoom)
            instance_destroy(obj_SliderTime)
        }
        
        if (instance_exists(obj_GUIMenuTriggerRotate)) {
            instance_destroy(obj_GUIMenuTriggerRotate)
            instance_destroy(obj_SliderRotateCam)
            instance_destroy(obj_SliderTime)
        }
        
        if (instance_exists(obj_GUIMenuForceBlock)) {
            instance_destroy(obj_GUIMenuForceBlock)
            //instance_destroy(obj_SliderRotateCam)
            instance_destroy(obj_SliderTime)
        }
        ScaleVar01 = true;
        scr_savelAllObjects();
        scr_room_transitions(Room, TransitionGen);
        break;
    }
    
    audio_stop_sound(StereoMadness)
    audio_stop_sound(BackOnTrack)
    audio_stop_sound(Polargeist)
    audio_stop_sound(DryOut)
    audio_stop_sound(BaseAfterBase)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
